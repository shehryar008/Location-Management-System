name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - run: dotnet restore
      - run: dotnet test --no-restore
      - run: dotnet publish -c Release -o published

      - uses: actions/upload-artifact@v4
        with:
          name: drop
          path: published/

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/locationcrud-app:latest

  deploy-local:
    needs: build-and-push-image
    runs-on: [ self-hosted, local ]
    steps:
      - uses: actions/checkout@v3

      - uses: docker/login-action@v2
        name: Login to GHCR
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: docker pull ghcr.io/${{ github.repository_owner }}/locationcrud-app:latest

      - name: Stop & remove existing container
        run: docker rm -f locationcrud-app
        continue-on-error: true

      - name: Run container on localhost:5000
        run: docker run -d --name locationcrud-app -p 5000:80 ghcr.io/${{ github.repository_owner }}/locationcrud-app:latest

      - name: Smoke-test HTTP endpoint
        shell: powershell
        run: |
          $max = 10
          $i = 0
          while ($i -lt $max) {
            try {
              $resp = Invoke-WebRequest -Uri http://localhost:5000 -Method Head -ErrorAction Stop
              if ($resp.StatusCode -eq 200) {
                Write-Host "✅ Application is responding!"
                exit 0
              }
            } catch {
              # ignore
            }
            $i++
            Write-Host "Waiting... ($i/$max)"
            Start-Sleep -Seconds 3
          }
          Write-Error "❌ Application did not respond in time"
          exit 1

name: CI/CD to ECR & SSM

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test --no-restore --verbosity normal

      - name: Publish
        run: dotnet publish -c Release -o published

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: drop
          path: published/

  build-and-push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest

    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push image to ECR
        id: push-image
        run: |
          IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-via-ssm:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest

    env:
      IMAGE_URI: ${{ needs.build-and-push-to-ecr.outputs.image_uri }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy via AWS SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy LocationCRUD" \
            --targets "tag:${{ secrets.SSM_INSTANCE_TAG }}" \
            --parameters commands=[
              "docker pull $IMAGE_URI",
              "docker rm -f locationcrud-app || true",
              "docker run -d --name locationcrud-app -p 5000:80 $IMAGE_URI"
            ] \
            --timeout-seconds 600 \
            --output text
